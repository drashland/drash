/**
 * Drash - A micro HTTP framework for JavaScript and TypeScript systems.
 * Copyright (C) 2022  Drash authors. The Drash authors are listed in the
 * AUTHORS file at <https://github.com/drashland/drash/AUTHORS>. This notice
 * applies to Drash version 3.X.X and any later version.
 *
 * This file is part of Drash. See <https://github.com/drashland/drash>.
 *
 * Drash is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Drash is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Drash. If not, see <https://www.gnu.org/licenses/>.
 */

import { DrashRequest } from "../HTTP/DrashRequest.ts";
import { ChainOfResponsibilityHandler } from "./ChainOfResponsibilityHandler.ts";
import { HTTPMethod } from "../Enums.ts";
import { ServicesHandler } from "./ServicesHandler.ts";
import * as Interfaces from "../Interfaces.ts";
import * as Types from "../Types.ts";
import { ResponseBuilder } from "../../builders/ResponseBuilder.ts";

/**
 * Class that handles requests that have made it to an existing resource. This
 * class ensures requests run through the chains defined by the `Resource` (see
 * `this#original`). Resource's can have multiple chains -- one for each HTTP
 * method they define; and each of those chains can have services.
 */
export class RequestHandler extends ChainOfResponsibilityHandler {
  public handle(
    context: Types.ContextForRequest,
  ): Types.Promisable<Types.ContextForRequest> {
    console.log(`RequestHandler.handle()`);

    context.response.body("The RequestHandler has changed the body");

    return context;

    // return new Response("Hello!");

    // return Promise
    //   .resolve()
    //   .then(() => this.matchRequestToResourceHandler(context))
    //   .then(() => super.runMethodChain(context, this.method_chain))
    //   .then(() => (context: Types.ContextForRequest) => {
    //     return context.resource_handler?.handle(context);
    //   })
    //   .catch((e: Error) => this.runErrorHandler(context, e))
    //   .then(() => {
    //     if (!context.response) {
    //       const teaPot = StatusCodeRegistry.get(418);
    //       context.response = new Response(
    //         "A response could not be generated by the server.",
    //         {
    //           status: teaPot?.value,
    //           statusText: teaPot?.description,
    //         },
    //       );
    //     }

    //     return context.response.build();
    //   });
  }

  /**
   * In the event an error occurs in the chain, this method is called to handle
   * the context and further process a proper `Response` for the client.
   * @param context
   * @param error
   * @returns
   */
  protected runErrorHandler(
    context: Types.ContextForRequest,
    error: Error,
  ): Promise<void> {
    context.error = error ?? new HTTPError(
      Enums.HTTPStatusCode.InternalServerError,
    );

    return Promise
      .resolve()
      .then(() => {
        context.response = this.error_handler.handle({
          error: context.error,
          request: context.request,
        });
      })
      .then(() => {
        if (this.services_handler.hasServices("runOnError")) {
          return this.services_handler.runOnErrorServices(
            context,
          );
        }
      });
  }
}
